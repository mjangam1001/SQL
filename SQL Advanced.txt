SQL Advanced

#Window functions :- A window function in SQL is a type of function that allows us to perform calculations across a specific set of rows called as 'window' related to the current row
:- unlike traditional aggregate functions that summarize data for the entire group, window functions allow detailed calculations for specific partitions or subsets of data
:- useful for aggregates, rankings, and cumulative totals without altering the dataset.
:- Aggregate function & window function
:- 
 SELECT Name, Age, Department, Salary, 
 AVG(Salary) OVER( PARTITION BY Department) AS Avg_Salary
 FROM employee
:- Over clause , partition by, order by

If two employees in a same department have same salary this is how the numbering will be done,
1.RANK(): Assigns ranks to rows, skipping ranks for duplicates. :- 1,1,3 (Skips 2 as 1 has occurred twice)
2.DENSE_RANK(): Assigns ranks to rows without skipping rank numbers for duplicates. :- 1,1,2 (doesn't skip 2)
3.ROW_NUMBER(): Assigns a unique number to each row in the result set. :- 1,2,3 (no 2 rows can have same number
4.NTILE(): function divides a result set into a specified number of approximately equal parts (called buckets or tiles).
5.LEAD(): function allows you to access data from the next row in the result set without needing to join the table to itself. basically it creates a new column and puts value which leads by n. If n is one, we will have next row's column value in our new column
6.LAG(): function allows you to access data from the previous row in the result set


SELECT 
  Name,
  Occupation,
  ROW_NUMBER() OVER (PARTITION BY Occupation ORDER BY Name) AS rn
FROM OCCUPATIONS;

After execution, we get something like this

Name	Occupation	rn
Amy	Doctor		1
Ben	Doctor		2
Clara	Singer		1
Dave	Singer		2
Ella	Professor	1


#Pivot & Unpivot
pivot :- transforms rows into columns
SELECT emp_id, [Jan], [Feb]
FROM (
  SELECT emp_id, month, salary
  FROM SalaryData
) AS SourceTable
PIVOT (
  SUM(salary)
  FOR month IN ([Jan], [Feb])
) AS PivotTable;

unpivot :- transforms columns into rows
SELECT emp_id, month, salary
FROM (
  SELECT emp_id, Jan, Feb
  FROM SalaryPivot
) AS SourceTable
UNPIVOT (
  salary FOR month IN (Jan, Feb)
) AS Unpivoted;


# CTE
A Common Table Expression (CTE) is a temporary result set that you can reference within a SELECT, INSERT, UPDATE, or DELETE query. CTEs are often used to simplify complex queries, especially when subqueries are involved. They improve query readability and make it easier to break down complex logic into manageable parts.
WITH DepartmentCTE AS (
    SELECT department_id
    FROM departments
    WHERE department_name = 'Sales'
)
SELECT employee_name, salary
FROM employees
WHERE department_id = (SELECT department_id FROM DepartmentCTE);

